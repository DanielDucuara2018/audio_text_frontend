# Dockerfile optimized for cloud storage + CDN deployment
# This builds static assets that can be uploaded to S3, GCS, Azure Blob, etc.

FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Build arguments for API configuration
ARG REACT_APP_AUDIO_TEXT_API_URL_ENV
ARG REACT_APP_AUDIO_TEXT_WS_URL_ENV

# Set production environment variables
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV INLINE_RUNTIME_CHUNK=false
ENV REACT_APP_AUDIO_TEXT_API_URL_ENV=${REACT_APP_AUDIO_TEXT_API_URL_ENV}
ENV REACT_APP_AUDIO_TEXT_WS_URL_ENV=${REACT_APP_AUDIO_TEXT_WS_URL_ENV}

# Update packages for security
RUN apk update && apk upgrade && apk add --no-cache git

# Copy package files first for better layer caching
COPY package*.json ./

# Install dependencies (including dev dependencies needed for build)
RUN npm ci --include=dev && npm cache clean --force

# Copy source code
COPY . .

# Build the application with optimizations for CDN
RUN npm run build

# Optimize build for CDN deployment
RUN find /app/build -type f -name "*.js" -exec gzip -k9 {} \; && \
    find /app/build -type f -name "*.css" -exec gzip -k9 {} \; && \
    find /app/build -type f -name "*.html" -exec gzip -k9 {} \; && \
    find /app/build -type f -name "*.json" -exec gzip -k9 {} \;

# Create deployment stage that only contains build artifacts
FROM scratch AS artifacts
COPY --from=builder /app/build /

# Optional: Create a simple verification stage
FROM alpine:latest AS verify
RUN apk add --no-cache file
COPY --from=builder /app/build /build
RUN ls -la /build && \
    echo "Build verification complete. Files ready for CDN deployment."